
Air condition.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000532  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800060  00800060  000005a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001154  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b2  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f1  00000000  00000000  000022ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000037c  00000000  00000000  00002cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c1  00000000  00000000  00003028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082b  00000000  00000000  000035e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00003e14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 37 02 	jmp	0x46e	; 0x46e <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 36       	cpi	r26, 0x6F	; 111
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9c 01 	call	0x338	; 0x338 <main>
  74:	0c 94 97 02 	jmp	0x52e	; 0x52e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_Init>:
void ADC_Init(void)
{

	
	#if  ADC_VOLTAGE_REFERENCE	==	ADC_VRREF_AVCC
	CLR_BIT(ADMUX , 7);
  7c:	3f 98       	cbi	0x07, 7	; 7
	SET_BIT(ADMUX , 6);
  7e:	3e 9a       	sbi	0x07, 6	; 7
	
	#endif
	
	#if  ADC_ADJUST				==	ADC_RIGHT_ADJUST
	
	CLR_BIT(ADMUX , 5);
  80:	3d 98       	cbi	0x07, 5	; 7

	ADMUX |= 0x00;
	
	#elif  ADC_CHANNEL			==	ADC_CHANNEL_1
	
	ADMUX |= 0x01;
  82:	38 9a       	sbi	0x07, 0	; 7
	
	#endif

	#if	 ADC_CONVERSION_TRIGGER	==	ADC_AUTO_TRIGGER
	
	SET_BIT(ADCSRA , 5);
  84:	35 9a       	sbi	0x06, 5	; 6
	
	#endif

	#if	 ADC_PRESCALER				==	ADC_PRESC_128
	
	ADCSRA |= 0x07;
  86:	86 b1       	in	r24, 0x06	; 6
  88:	87 60       	ori	r24, 0x07	; 7
  8a:	86 b9       	out	0x06, r24	; 6
	#endif
	

	#if	 ADC_INTERRUPT_SATATE	==	ADC_INTERRUPT_DISABLE
	
	CLR_BIT(ADCSRA , 3);
  8c:	33 98       	cbi	0x06, 3	; 6
	
	#endif
	
	
	//ADC Enable
	SET_BIT(ADCSRA , 7);
  8e:	37 9a       	sbi	0x06, 7	; 6
  90:	08 95       	ret

00000092 <ADC_Read>:
void ADC_Read(uint16* value)
{
	uint16 Digital_value = 0;
	
	//start conversion
	SET_BIT(ADCSRA , 6);
  92:	36 9a       	sbi	0x06, 6	; 6
	
	#if ADC_INTERRUPT_SATATE == ADC_INTERRUPT_DISABLE
	
	while(!GET_BIT(ADCSRA ,4)); //Flag is not set(1) yet (pooling)
  94:	34 9b       	sbis	0x06, 4	; 6
  96:	fe cf       	rjmp	.-4      	; 0x94 <ADC_Read+0x2>
	
	Digital_value = ADC_Adjust;
  98:	24 b1       	in	r18, 0x04	; 4
  9a:	35 b1       	in	r19, 0x05	; 5
	
	//*value = ((Digital_value * 500) / 1024);
	*value = Digital_value;
  9c:	fc 01       	movw	r30, r24
  9e:	31 83       	std	Z+1, r19	; 0x01
  a0:	20 83       	st	Z, r18
  a2:	08 95       	ret

000000a4 <__vector_16>:
	
}


ISR(ADC_vect)
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	4f 93       	push	r20
  b4:	5f 93       	push	r21
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	value = ((ADC_Adjust * 500) / 1024);
  ba:	44 b1       	in	r20, 0x04	; 4
  bc:	55 b1       	in	r21, 0x05	; 5
  be:	24 ef       	ldi	r18, 0xF4	; 244
  c0:	31 e0       	ldi	r19, 0x01	; 1
  c2:	42 9f       	mul	r20, r18
  c4:	c0 01       	movw	r24, r0
  c6:	43 9f       	mul	r20, r19
  c8:	90 0d       	add	r25, r0
  ca:	52 9f       	mul	r21, r18
  cc:	90 0d       	add	r25, r0
  ce:	11 24       	eor	r1, r1
  d0:	89 2f       	mov	r24, r25
  d2:	99 27       	eor	r25, r25
  d4:	86 95       	lsr	r24
  d6:	86 95       	lsr	r24
  d8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	5f 91       	pop	r21
  e6:	4f 91       	pop	r20
  e8:	3f 91       	pop	r19
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <DC_Motor_Init>:

void DC_Motor_Init(void)
{
	//initializing the two pins that control the direction to output 
	
	DIO_SetPinDir(DIO_PORTC , DIO_PIN3 , DIO_PIN_OUTPUT); // high in clockwise
  f6:	41 e0       	ldi	r20, 0x01	; 1
  f8:	63 e0       	ldi	r22, 0x03	; 3
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinDir>
	DIO_SetPinDir(DIO_PORTC , DIO_PIN4 , DIO_PIN_OUTPUT); // low  in clockwise
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	64 e0       	ldi	r22, 0x04	; 4
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	0e 94 ba 00 	call	0x174	; 0x174 <DIO_SetPinDir>
	
	PWM0_Init();
 10a:	0e 94 6f 02 	call	0x4de	; 0x4de <PWM0_Init>
 10e:	08 95       	ret

00000110 <DC_Motor_SetDirection>:
}

void DC_Motor_SetDirection(DC_Motor_DIR dir)
{
	switch(dir)
 110:	88 23       	and	r24, r24
 112:	19 f0       	breq	.+6      	; 0x11a <DC_Motor_SetDirection+0xa>
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	61 f0       	breq	.+24     	; 0x130 <DC_Motor_SetDirection+0x20>
 118:	08 95       	ret
	{
		case CLOCKWISE :
		DIO_SetPinValue(DIO_PORTC , DIO_PIN3 , DIO_PIN_HIGH);
 11a:	41 e0       	ldi	r20, 0x01	; 1
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	82 e0       	ldi	r24, 0x02	; 2
 120:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTC , DIO_PIN4 , DIO_PIN_LOW);
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	64 e0       	ldi	r22, 0x04	; 4
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_SetPinValue>
		break;
 12e:	08 95       	ret
		
		case ANTI_CLOCKWISE:
		DIO_SetPinValue(DIO_PORTC , DIO_PIN3 , DIO_PIN_LOW);
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	63 e0       	ldi	r22, 0x03	; 3
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTC , DIO_PIN4 , DIO_PIN_HIGH);
 13a:	41 e0       	ldi	r20, 0x01	; 1
 13c:	64 e0       	ldi	r22, 0x04	; 4
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_SetPinValue>
 144:	08 95       	ret

00000146 <DC_Motor_SetSpeed>:

void DC_Motor_SetSpeed(uint8 speed)
{
	speed *=10; // range from 1 - 10 for simplicity 
	
	PWM0_Generate(speed);
 146:	88 0f       	add	r24, r24
 148:	98 2f       	mov	r25, r24
 14a:	99 0f       	add	r25, r25
 14c:	99 0f       	add	r25, r25
 14e:	89 0f       	add	r24, r25
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 74 02 	call	0x4e8	; 0x4e8 <PWM0_Generate>
 156:	08 95       	ret

00000158 <DC_Motor_Start>:
	
}
*/
void DC_Motor_Start(void)
{
	PWM0_Start();
 158:	0e 94 84 02 	call	0x508	; 0x508 <PWM0_Start>
 15c:	08 95       	ret

0000015e <DC_Motor_Stop>:

void DC_Motor_Stop(void)
{
	// setting the two direction pins to high to stop inertia 
	
	DIO_SetPinValue(DIO_PORTC , DIO_PIN3 , DIO_PIN_HIGH); 
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	63 e0       	ldi	r22, 0x03	; 3
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTC , DIO_PIN4 , DIO_PIN_HIGH);
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	64 e0       	ldi	r22, 0x04	; 4
 16c:	82 e0       	ldi	r24, 0x02	; 2
 16e:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_SetPinValue>
 172:	08 95       	ret

00000174 <DIO_SetPinDir>:
		
		break;
		
		case DIO_PORTD :
		
		PORTD = Val ;
 174:	44 23       	and	r20, r20
 176:	b9 f1       	breq	.+110    	; 0x1e6 <DIO_SetPinDir+0x72>
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	09 f0       	breq	.+2      	; 0x17e <DIO_SetPinDir+0xa>
 17c:	6b c0       	rjmp	.+214    	; 0x254 <DIO_SetPinDir+0xe0>
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	89 f0       	breq	.+34     	; 0x1a4 <DIO_SetPinDir+0x30>
 182:	28 f0       	brcs	.+10     	; 0x18e <DIO_SetPinDir+0x1a>
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	c9 f0       	breq	.+50     	; 0x1ba <DIO_SetPinDir+0x46>
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	11 f1       	breq	.+68     	; 0x1d0 <DIO_SetPinDir+0x5c>
 18c:	08 95       	ret
 18e:	2a b3       	in	r18, 0x1a	; 26
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	02 c0       	rjmp	.+4      	; 0x19a <DIO_SetPinDir+0x26>
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <DIO_SetPinDir+0x22>
 19e:	82 2b       	or	r24, r18
 1a0:	8a bb       	out	0x1a, r24	; 26
 1a2:	08 95       	ret
 1a4:	27 b3       	in	r18, 0x17	; 23
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinDir+0x3c>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinDir+0x38>
 1b4:	82 2b       	or	r24, r18
 1b6:	87 bb       	out	0x17, r24	; 23
 1b8:	08 95       	ret
 1ba:	24 b3       	in	r18, 0x14	; 20
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_SetPinDir+0x52>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_SetPinDir+0x4e>
 1ca:	82 2b       	or	r24, r18
 1cc:	84 bb       	out	0x14, r24	; 20
 1ce:	08 95       	ret
 1d0:	21 b3       	in	r18, 0x11	; 17
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinDir+0x68>
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinDir+0x64>
 1e0:	82 2b       	or	r24, r18
 1e2:	81 bb       	out	0x11, r24	; 17
 1e4:	08 95       	ret
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 f0       	breq	.+36     	; 0x20e <DIO_SetPinDir+0x9a>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <DIO_SetPinDir+0x82>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	d9 f0       	breq	.+54     	; 0x226 <DIO_SetPinDir+0xb2>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	29 f1       	breq	.+74     	; 0x23e <DIO_SetPinDir+0xca>
 1f4:	08 95       	ret
 1f6:	2a b3       	in	r18, 0x1a	; 26
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_SetPinDir+0x8e>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_SetPinDir+0x8a>
 206:	80 95       	com	r24
 208:	82 23       	and	r24, r18
 20a:	8a bb       	out	0x1a, r24	; 26
 20c:	08 95       	ret
 20e:	27 b3       	in	r18, 0x17	; 23
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPinDir+0xa6>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPinDir+0xa2>
 21e:	80 95       	com	r24
 220:	82 23       	and	r24, r18
 222:	87 bb       	out	0x17, r24	; 23
 224:	08 95       	ret
 226:	24 b3       	in	r18, 0x14	; 20
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_SetPinDir+0xbe>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	6a 95       	dec	r22
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_SetPinDir+0xba>
 236:	80 95       	com	r24
 238:	82 23       	and	r24, r18
 23a:	84 bb       	out	0x14, r24	; 20
 23c:	08 95       	ret
 23e:	21 b3       	in	r18, 0x11	; 17
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_SetPinDir+0xd6>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_SetPinDir+0xd2>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	81 bb       	out	0x11, r24	; 17
 254:	08 95       	ret

00000256 <DIO_SetPinValue>:
}


void DIO_SetPinValue(uint8 Port ,uint8 Pin ,  uint8 Val)
{
	switch (Val)
 256:	44 23       	and	r20, r20
 258:	b9 f1       	breq	.+110    	; 0x2c8 <DIO_SetPinValue+0x72>
 25a:	41 30       	cpi	r20, 0x01	; 1
 25c:	09 f0       	breq	.+2      	; 0x260 <DIO_SetPinValue+0xa>
 25e:	6b c0       	rjmp	.+214    	; 0x336 <DIO_SetPinValue+0xe0>
	{
		
		case DIO_PIN_HIGH :
		
		switch(Port)
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	89 f0       	breq	.+34     	; 0x286 <DIO_SetPinValue+0x30>
 264:	28 f0       	brcs	.+10     	; 0x270 <DIO_SetPinValue+0x1a>
 266:	82 30       	cpi	r24, 0x02	; 2
 268:	c9 f0       	breq	.+50     	; 0x29c <DIO_SetPinValue+0x46>
 26a:	83 30       	cpi	r24, 0x03	; 3
 26c:	11 f1       	breq	.+68     	; 0x2b2 <DIO_SetPinValue+0x5c>
 26e:	08 95       	ret
		{
			case DIO_PORTA :
			
			SET_BIT(PORTA, Pin);
 270:	2b b3       	in	r18, 0x1b	; 27
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_SetPinValue+0x26>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_SetPinValue+0x22>
 280:	82 2b       	or	r24, r18
 282:	8b bb       	out	0x1b, r24	; 27
			
			break;
 284:	08 95       	ret
			
			case DIO_PORTB :
			
			SET_BIT(PORTB, Pin);
 286:	28 b3       	in	r18, 0x18	; 24
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_SetPinValue+0x3c>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_SetPinValue+0x38>
 296:	82 2b       	or	r24, r18
 298:	88 bb       	out	0x18, r24	; 24
			
			break;
 29a:	08 95       	ret
			
			case DIO_PORTC :
			
			SET_BIT(PORTC, Pin);
 29c:	25 b3       	in	r18, 0x15	; 21
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_SetPinValue+0x52>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_SetPinValue+0x4e>
 2ac:	82 2b       	or	r24, r18
 2ae:	85 bb       	out	0x15, r24	; 21
			
			break;
 2b0:	08 95       	ret
			
			case DIO_PORTD :
			
			SET_BIT(PORTD, Pin);
 2b2:	22 b3       	in	r18, 0x12	; 18
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_SetPinValue+0x68>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_SetPinValue+0x64>
 2c2:	82 2b       	or	r24, r18
 2c4:	82 bb       	out	0x12, r24	; 18
			
			break;
 2c6:	08 95       	ret
		
		break;
		
		case DIO_PIN_LOW :
		
		switch(Port)
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	91 f0       	breq	.+36     	; 0x2f0 <DIO_SetPinValue+0x9a>
 2cc:	28 f0       	brcs	.+10     	; 0x2d8 <DIO_SetPinValue+0x82>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	d9 f0       	breq	.+54     	; 0x308 <DIO_SetPinValue+0xb2>
 2d2:	83 30       	cpi	r24, 0x03	; 3
 2d4:	29 f1       	breq	.+74     	; 0x320 <DIO_SetPinValue+0xca>
 2d6:	08 95       	ret
		{
			case DIO_PORTA :
			
			CLR_BIT(PORTA, Pin);
 2d8:	2b b3       	in	r18, 0x1b	; 27
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_SetPinValue+0x8e>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_SetPinValue+0x8a>
 2e8:	80 95       	com	r24
 2ea:	82 23       	and	r24, r18
 2ec:	8b bb       	out	0x1b, r24	; 27
			
			break;
 2ee:	08 95       	ret
			
			case DIO_PORTB :
			
			CLR_BIT(PORTB, Pin);
 2f0:	28 b3       	in	r18, 0x18	; 24
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_SetPinValue+0xa6>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_SetPinValue+0xa2>
 300:	80 95       	com	r24
 302:	82 23       	and	r24, r18
 304:	88 bb       	out	0x18, r24	; 24
			
			break;
 306:	08 95       	ret
			
			case DIO_PORTC :
			
			CLR_BIT(PORTC, Pin);
 308:	25 b3       	in	r18, 0x15	; 21
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_SetPinValue+0xbe>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_SetPinValue+0xba>
 318:	80 95       	com	r24
 31a:	82 23       	and	r24, r18
 31c:	85 bb       	out	0x15, r24	; 21
			
			break;
 31e:	08 95       	ret
			
			case DIO_PORTD :
			
			CLR_BIT(PORTD, Pin);
 320:	22 b3       	in	r18, 0x12	; 18
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_SetPinValue+0xd6>
 328:	88 0f       	add	r24, r24
 32a:	99 1f       	adc	r25, r25
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_SetPinValue+0xd2>
 330:	80 95       	com	r24
 332:	82 23       	and	r24, r18
 334:	82 bb       	out	0x12, r24	; 18
 336:	08 95       	ret

00000338 <main>:
#include "Temprature_Sensor.h"
#include "DC_Motor.h"

uint8 motor_speed = 0;
int main(void)
{
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	00 d0       	rcall	.+0      	; 0x33e <main+0x6>
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
	uint16 temp = 0;
 342:	1a 82       	std	Y+2, r1	; 0x02
 344:	19 82       	std	Y+1, r1	; 0x01
	Tempsensor_Init();
 346:	0e 94 df 01 	call	0x3be	; 0x3be <Tempsensor_Init>
	DC_Motor_Init();
 34a:	0e 94 7b 00 	call	0xf6	; 0xf6 <DC_Motor_Init>
	DC_Motor_SetDirection(CLOCKWISE);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	0e 94 88 00 	call	0x110	; 0x110 <DC_Motor_SetDirection>
		
		
		//Control_fan(&temp);
		
		
		Tempsensor_Read(&temp);
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Tempsensor_Read>
		
		if (temp > 10 && temp <=20)
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	9a 81       	ldd	r25, Y+2	; 0x02
 360:	9c 01       	movw	r18, r24
 362:	2b 50       	subi	r18, 0x0B	; 11
 364:	31 09       	sbc	r19, r1
 366:	2a 30       	cpi	r18, 0x0A	; 10
 368:	31 05       	cpc	r19, r1
 36a:	30 f4       	brcc	.+12     	; 0x378 <main+0x40>
		{
			
			DC_Motor_SetSpeed(3);
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	0e 94 a3 00 	call	0x146	; 0x146 <DC_Motor_SetSpeed>
			DC_Motor_Start();
 372:	0e 94 ac 00 	call	0x158	; 0x158 <DC_Motor_Start>
 376:	ee cf       	rjmp	.-36     	; 0x354 <main+0x1c>
			
		}
		else if (temp > 20 && temp <=25)
 378:	9c 01       	movw	r18, r24
 37a:	25 51       	subi	r18, 0x15	; 21
 37c:	31 09       	sbc	r19, r1
 37e:	25 30       	cpi	r18, 0x05	; 5
 380:	31 05       	cpc	r19, r1
 382:	30 f4       	brcc	.+12     	; 0x390 <main+0x58>
		{
			DC_Motor_SetSpeed(5);
 384:	85 e0       	ldi	r24, 0x05	; 5
 386:	0e 94 a3 00 	call	0x146	; 0x146 <DC_Motor_SetSpeed>
			DC_Motor_Start();
 38a:	0e 94 ac 00 	call	0x158	; 0x158 <DC_Motor_Start>
 38e:	e2 cf       	rjmp	.-60     	; 0x354 <main+0x1c>
		}
		else if (temp > 25 && temp <=30)
 390:	9c 01       	movw	r18, r24
 392:	2a 51       	subi	r18, 0x1A	; 26
 394:	31 09       	sbc	r19, r1
 396:	25 30       	cpi	r18, 0x05	; 5
 398:	31 05       	cpc	r19, r1
 39a:	30 f4       	brcc	.+12     	; 0x3a8 <main+0x70>
		{
			DC_Motor_SetSpeed(8);
 39c:	88 e0       	ldi	r24, 0x08	; 8
 39e:	0e 94 a3 00 	call	0x146	; 0x146 <DC_Motor_SetSpeed>
			DC_Motor_Start();
 3a2:	0e 94 ac 00 	call	0x158	; 0x158 <DC_Motor_Start>
 3a6:	d6 cf       	rjmp	.-84     	; 0x354 <main+0x1c>
		}
		else if (temp > 30)
 3a8:	4f 97       	sbiw	r24, 0x1f	; 31
 3aa:	30 f0       	brcs	.+12     	; 0x3b8 <main+0x80>
		{
			DC_Motor_SetSpeed(10);
 3ac:	8a e0       	ldi	r24, 0x0A	; 10
 3ae:	0e 94 a3 00 	call	0x146	; 0x146 <DC_Motor_SetSpeed>
			DC_Motor_Start();
 3b2:	0e 94 ac 00 	call	0x158	; 0x158 <DC_Motor_Start>
 3b6:	ce cf       	rjmp	.-100    	; 0x354 <main+0x1c>
		}
		else
		{
			DC_Motor_Stop();
 3b8:	0e 94 af 00 	call	0x15e	; 0x15e <DC_Motor_Stop>
 3bc:	cb cf       	rjmp	.-106    	; 0x354 <main+0x1c>

000003be <Tempsensor_Init>:

#include "Temprature_Sensor.h"

void Tempsensor_Init(void)
{
	ADC_Init();
 3be:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_Init>
 3c2:	08 95       	ret

000003c4 <Tempsensor_Read>:

void Tempsensor_Read(uint16* temp)
{
	//uint16 Analog_Value = 0;
	
	ADC_Read(temp);
 3c4:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Read>
 3c8:	08 95       	ret

000003ca <__vector_11>:
}



ISR(TIMER0_OVF_vect)
{
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	2f 93       	push	r18
 3d6:	3f 93       	push	r19
 3d8:	4f 93       	push	r20
 3da:	5f 93       	push	r21
 3dc:	6f 93       	push	r22
 3de:	7f 93       	push	r23
 3e0:	8f 93       	push	r24
 3e2:	9f 93       	push	r25
 3e4:	af 93       	push	r26
 3e6:	bf 93       	push	r27
 3e8:	ef 93       	push	r30
 3ea:	ff 93       	push	r31
	static uint32 cnt = 0;
	
	cnt++;
 3ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <cnt.1674>
 3f0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <cnt.1674+0x1>
 3f4:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <cnt.1674+0x2>
 3f8:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <cnt.1674+0x3>
 3fc:	01 96       	adiw	r24, 0x01	; 1
 3fe:	a1 1d       	adc	r26, r1
 400:	b1 1d       	adc	r27, r1
 402:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <cnt.1674>
 406:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <cnt.1674+0x1>
 40a:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <cnt.1674+0x2>
 40e:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <cnt.1674+0x3>
	
	if(cnt == Number_OVRflows)
 412:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <Number_OVRflows>
 416:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <Number_OVRflows+0x1>
 41a:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <Number_OVRflows+0x2>
 41e:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <Number_OVRflows+0x3>
 422:	84 17       	cp	r24, r20
 424:	95 07       	cpc	r25, r21
 426:	a6 07       	cpc	r26, r22
 428:	b7 07       	cpc	r27, r23
 42a:	81 f4       	brne	.+32     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
	{
		TCNT0 = Init_Value;
 42c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <Init_Value>
 430:	82 bf       	out	0x32, r24	; 50
		
		cnt = 0;
 432:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt.1674>
 436:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <cnt.1674+0x1>
 43a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <cnt.1674+0x2>
 43e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <cnt.1674+0x3>
		
		(*ptr)();
 442:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <ptr>
 446:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <ptr+0x1>
 44a:	09 95       	icall
	}
}
 44c:	ff 91       	pop	r31
 44e:	ef 91       	pop	r30
 450:	bf 91       	pop	r27
 452:	af 91       	pop	r26
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	7f 91       	pop	r23
 45a:	6f 91       	pop	r22
 45c:	5f 91       	pop	r21
 45e:	4f 91       	pop	r20
 460:	3f 91       	pop	r19
 462:	2f 91       	pop	r18
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <__vector_7>:



ISR(TIMER1_COMPA_vect)
{
 46e:	1f 92       	push	r1
 470:	0f 92       	push	r0
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	0f 92       	push	r0
 476:	11 24       	eor	r1, r1
 478:	2f 93       	push	r18
 47a:	3f 93       	push	r19
 47c:	4f 93       	push	r20
 47e:	5f 93       	push	r21
 480:	6f 93       	push	r22
 482:	7f 93       	push	r23
 484:	8f 93       	push	r24
 486:	9f 93       	push	r25
 488:	af 93       	push	r26
 48a:	bf 93       	push	r27
 48c:	ef 93       	push	r30
 48e:	ff 93       	push	r31
	static counter = 0;
	
	counter++;
 490:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter.1680>
 494:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counter.1680+0x1>
 498:	01 96       	adiw	r24, 0x01	; 1
	
	if(counter == 1)
 49a:	81 30       	cpi	r24, 0x01	; 1
 49c:	91 05       	cpc	r25, r1
 49e:	29 f0       	breq	.+10     	; 0x4aa <__vector_7+0x3c>

ISR(TIMER1_COMPA_vect)
{
	static counter = 0;
	
	counter++;
 4a0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <counter.1680+0x1>
 4a4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter.1680>
 4a8:	09 c0       	rjmp	.+18     	; 0x4bc <__vector_7+0x4e>
	
	if(counter == 1)
	{
		counter = 0;
 4aa:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counter.1680+0x1>
 4ae:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter.1680>
		
		(*ptr)();
 4b2:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <ptr>
 4b6:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <ptr+0x1>
 4ba:	09 95       	icall
	}
}
 4bc:	ff 91       	pop	r31
 4be:	ef 91       	pop	r30
 4c0:	bf 91       	pop	r27
 4c2:	af 91       	pop	r26
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	7f 91       	pop	r23
 4ca:	6f 91       	pop	r22
 4cc:	5f 91       	pop	r21
 4ce:	4f 91       	pop	r20
 4d0:	3f 91       	pop	r19
 4d2:	2f 91       	pop	r18
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <PWM0_Init>:


void PWM0_Init(void)
{
	DDRB |= 0x08;
 4de:	bb 9a       	sbi	0x17, 3	; 23
	
	TCCR0 |= 0x68;
 4e0:	83 b7       	in	r24, 0x33	; 51
 4e2:	88 66       	ori	r24, 0x68	; 104
 4e4:	83 bf       	out	0x33, r24	; 51
 4e6:	08 95       	ret

000004e8 <PWM0_Generate>:
}


void PWM0_Generate(uint16 Duty_Cycle)
{
	OCR0 = ((Duty_Cycle * 256 ) /100 ) - 1;
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	38 2f       	mov	r19, r24
 4ee:	36 95       	lsr	r19
 4f0:	27 95       	ror	r18
 4f2:	36 95       	lsr	r19
 4f4:	27 95       	ror	r18
 4f6:	ab e7       	ldi	r26, 0x7B	; 123
 4f8:	b4 e1       	ldi	r27, 0x14	; 20
 4fa:	0e 94 88 02 	call	0x510	; 0x510 <__umulhisi3>
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
 502:	81 50       	subi	r24, 0x01	; 1
 504:	8c bf       	out	0x3c, r24	; 60
 506:	08 95       	ret

00000508 <PWM0_Start>:


void PWM0_Start(void)
{
	
	TCCR0 |= 0x01 ;
 508:	83 b7       	in	r24, 0x33	; 51
 50a:	81 60       	ori	r24, 0x01	; 1
 50c:	83 bf       	out	0x33, r24	; 51
 50e:	08 95       	ret

00000510 <__umulhisi3>:
 510:	a2 9f       	mul	r26, r18
 512:	b0 01       	movw	r22, r0
 514:	b3 9f       	mul	r27, r19
 516:	c0 01       	movw	r24, r0
 518:	a3 9f       	mul	r26, r19
 51a:	70 0d       	add	r23, r0
 51c:	81 1d       	adc	r24, r1
 51e:	11 24       	eor	r1, r1
 520:	91 1d       	adc	r25, r1
 522:	b2 9f       	mul	r27, r18
 524:	70 0d       	add	r23, r0
 526:	81 1d       	adc	r24, r1
 528:	11 24       	eor	r1, r1
 52a:	91 1d       	adc	r25, r1
 52c:	08 95       	ret

0000052e <_exit>:
 52e:	f8 94       	cli

00000530 <__stop_program>:
 530:	ff cf       	rjmp	.-2      	; 0x530 <__stop_program>
